#!/gscratch/esci/dacb/anacondainstall/bin/python

import re
import os  # to make a dir for plots

import numpy as np
import pandas as pd
import matplotlib
# Force matplotlib to not use any Xwindows backend.
# http://matplotlib.org/faq/howto_faq.html#generate-images-without-having-a-window-appear
matplotlib.use('Agg')  # Do this before `import matplotlib.pyplot as plt`
import matplotlib.pyplot as plt
import pprint

import pysam

import inspect

# this will convert the attributes of a class to a dict for flattening out to pd.DataFrame.from_dict
def props(obj):
    pr = {}
    for name in dir(obj):
        value = getattr(obj, name)
        if not name.startswith('__') and not inspect.ismethod(value):
            pr[name] = value
    return pr

inputFile = "LakWasMet55_HOW8_2.sorted.bam"
#inputFile = "LakWasMet55_HOW8_2.sorted.100k.sam"
print "input file: " + inputFile

# Conversion between pysam's numericl cigar values & letter form.
operationInt2StrDict = { 0 : 'M', 1 : 'I', 2 : 'D', 3 : 'N', 4 : 'S', 5 : 'H', 6 : 'P', 7 : '=', 8 : 'X' }
# A dict to tell you what CIGAR letters mean.
# http://seqanswers.com/forums/showthread.php?t=4882
CIGAR_letter_dict = {'M': 'match or mismatch', 'I' : 'insertion',
                        'D': 'deletion', # The extended cigar adds: 
                        'N' : 'skipped bases on reference',
                        'S' : 'soft clipping', 'H' : 'hard clipping',
                        'P' : 'padding' }

class Scaffold:
    def __init__(self, name):
        self.name = name;
        self.lengthFreqDict = { 'M' : {}, 'I' : {}, 'D' : {}, 'N' : {}, 'S' : {}, 'H' : {}, 'P' : {}, 'X' : {}, '=' : {} }
        self.operationFreqDict = { 'M' : 0, 'I' : 0, 'D' : 0, 'N' : 0, 'S' : 0, 'H' : 0, 'P' : 0, 'X' : 0, '=' : 0 }
        self.mappingQualDict = { }
        self.readsMapped = 0
    def include_cigar_stats(self,read):
        # add 1 count if read mapped
        self.readsMapped += 1
        # Add a count to operationFreqDict for each piece of information in the CIGAR. 
        for operation in read.cigartuples:  # uses pysam
            # convert from numerical CIGAR codes to the letters
            oper = operationInt2StrDict[operation[0]]  
            length = int(operation[1])
            # Increase count (doesn't consider length)
            self.operationFreqDict[oper] += 1
            # Add length information to lengthFreqDict
            if length in self.lengthFreqDict[oper].keys():
                self.lengthFreqDict[oper][length] += 1 
            else: self.lengthFreqDict[oper][length] = 1
    def __str__(self):
        s = self.name + "\n"
        s += pprint.pformat(self.operationFreqDict) + "\n" 
        s += pprint.pformat(self.lengthFreqDict)
        return s 

# Will have a dictionary of Scaffold objects to collect information in CIGAR strings and mapping qualities. 
# Key = scaffold name provided by pysam's bamFile.references list
# Value = Scaffold object
scaffoldsDict = { }

print("analysis run commencing for file {0:s}".format(inputFile))
bamFile =  pysam.AlignmentFile(inputFile)

# Initialize a Scaffold object for each scaffold in our metagenome. 
for scaffold in bamFile.references:
    # print an error if key already exists
    if scaffold in scaffoldsDict.keys():
        print "reduntant scaffold name"
    scaffoldsDict[scaffold] = Scaffold(scaffold)
#print scaffoldsDict.keys()

# Loop over an alignment file to fill in values for Scaffold objects in scaffoldsDict
# use until_eof=True to circumvent needed an index, should also be faster
totalReads = 0
unmappedReads = 0
for read in bamFile.fetch(until_eof=True):
    totalReads += 1
    if not read.is_unmapped:
        scaffoldsDict[read.reference_name].include_cigar_stats(read)
    else:
        unmappedReads = unmappedReads + 1

# output
print("Found {0:d} total reads of which {1:d} were unmapped".format(totalReads, unmappedReads))

#scaffolds = { }
#for scaffold in scaffoldsDict.keys():
#    scaffolds[scaffold] = props(scaffoldsDict[scaffold])

#print(pd.DataFrame.from_dict(scaffolds))


# Some nice colors
# http://www.randalolson.com/2014/06/28/how-to-make-beautiful-data-visualizations-in-python-with-matplotlib/
tableau20 = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),    
             (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),    
             (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),    
             (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),    
             (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]    
# Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.    
for i in range(len(tableau20)):    
    r, g, b = tableau20[i]    
    tableau20[i] = (r / 255., g / 255., b / 255.)  
# a few J likes from http://tableaufriction.blogspot.ro/2012/11/finally-you-can-use-tableau-data-colors.html
tableau = {"blue":(31, 119, 180), "green":(48, 147,67), "light green":(103,191,92), "orange":(255,127,14), "purple":(148,103,189)}
for key in tableau.keys():
    r, g, b = tableau[key]
    tableau[key] = (r / 255., g / 255., b / 255.)

# make dir for all figures
plot_dir = "./parse_CIGAR_plots--stratified/"
if not os.path.exists(plot_dir):
    os.makedirs(plot_dir, 0755)

def plot_element_frequencies(scaffold, plot_dir):
    # Set some plotting parameters.
    # Make the figure size smaller so the text isn't tiny.   http://matplotlib.org/api/figure_api.html
    plt.figure(figsize=(6,4))
    # Prevent the x-labels from cutting off.
    # http://stackoverflow.com/questions/6774086/why-is-my-xlabel-cut-off-in-my-matplotlib-plot
    plt.gcf().subplots_adjust(bottom=0.15)
    # clear plotting history
    plt.clf()
    pos = np.arange(len(scaffold.operationFreqDict.keys()))
        # arange([start,] stop[, step,], dtype=None)
        # Return evenly spaced values within a given interval.
    width = 1.0     # gives histogram aspect to the bar diagram 
    ax = plt.axes()
    ax.spines["top"].set_visible(False)    
    ax.spines["bottom"].set_visible(False)    
    ax.spines["right"].set_visible(False)    
    ax.spines["left"].set_visible(False) 
    # Ensure that the axis ticks only show up on the bottom and left of the plot.    
    # Ticks on the right and top of the plot are generally unnecessary chartjunk.    
    ax.get_xaxis().tick_bottom()    
    ax.get_yaxis().tick_left()
    # overwrite the default y-ticks.  They go too far up the plot. 
    high_y = max(scaffold.operationFreqDict.values())
    low_y = 0
    plt.ylim([low_y, np.ceil(high_y+0.1*(high_y-low_y))])
    # set x ticks and labels.  
    ax.set_xticks(pos + (width / 2))
    ax.set_xticklabels(scaffold.operationFreqDict.keys())
    ax.set_xlabel('CIGAR letter')
    ax.set_ylabel('frequency across reads')
    ax.set_title("frequency of cigar letters: " + scaffold.name)
    # generate plot
    plt.bar(pos, scaffold.operationFreqDict.values(), width, color=tableau['light green'])
    plt.savefig(plot_dir + "elementFreq_" + scaffold.name + ".pdf", dpi=None, facecolor='w', edgecolor='w',
        transparent=True, bbox_inches=None, pad_inches=0.1,
        frameon=None)

#plot_element_frequencies(scaffoldsDict["NC_012968"], plot_dir = plot_dir)

def plot_element_length_distribution(scaffold, element, plot_dir, fraction=True):
    # Set some plotting parameters.
    # Make the figure size smaller so the text isn't tiny.   http://matplotlib.org/api/figure_api.html
    plt.figure(figsize=(6.5,4))
    # Prevent the x-labels from cutting off.
    # http://stackoverflow.com/questions/6774086/why-is-my-xlabel-cut-off-in-my-matplotlib-plot
    plt.gcf().subplots_adjust(bottom=0.15, left = 0.15)
    # prepare data
    # clear plotting history
    plt.clf()
    # make sure they are all integers
    d = {int(k):int(v) for k,v in scaffold.lengthFreqDict[element].items()}
    # if plotting fraction of reads with that length appearing:
    if fraction:
        for key, value in d.items():
            d[key] = float(value) / scaffold.readsMapped
    # Remove the plot frame lines. They are unnecessary chartjunk.   
    ax = plt.axes()
    ax.spines["top"].set_visible(False)    
    ax.spines["bottom"].set_visible(False)    
    ax.spines["right"].set_visible(False)    
    ax.spines["left"].set_visible(False) 
    # Ensure that the axis ticks only show up on the bottom and left of the plot.    
    # Ticks on the right and top of the plot are generally unnecessary chartjunk.    
    ax.get_xaxis().tick_bottom()    
    ax.get_yaxis().tick_left()
    ## overwrite the default y-ticks.  They go too far up the plot.
    #high_y = max(d.values())
    #low_y = 0
    #plt.ylim([low_y, np.ceil(high_y)]) #+0.1*(high_y-low_y))])
    #print "y limits:"
    #print [low_y, np.ceil(high_y)]
    # set labels and title
    ax.set_xlabel('frequencies of ' + element + ": " + CIGAR_letter_dict[element])
    if fraction: 
        ax.set_ylabel('# of occurances/# of reads')
    else:
        ax.set_ylabel('frequency across reads')
    ax.set_title("distribution of cigar element lengths: " + scaffold.name)
    # generate plot
    min_bin = 1 # np.min(d.keys()) 
    max_bin = np.max(d.keys()) 
    bins = np.arange(min_bin, max_bin + 1)
    width = 1
    # adjust bins so there is one per x-axis integer.
    bins=np.arange(bins.min(), bins.max()+1) -width/2
    vals = np.zeros(max_bin - min_bin + 1)
    for k,v in d.items(): 
            vals[k - min_bin] = v
    # generate plot
    plt.bar(bins, vals, width=width, color=tableau['blue'], edgecolor='none')
    plt.savefig(plot_dir + "elementLenDict_" + scaffold.name + "_" + element + ".pdf", dpi=None, facecolor='w', edgecolor='w',
        transparent=True, bbox_inches=None, pad_inches=0.1,
        frameon=None)

# plot_element_length_distribution(scaffoldsDict["NC_012968"], plot_dir = plot_dir, element='S')

print " Make plots for each scaffold." 
# Make plots for each scaffold.  
for scaffold in scaffoldsDict.values():
    # only plot if had > 1 read
    if scaffold.readsMapped > 0:
    # make a directory for that scaffold
        plot_dir = "./cigarPlotsStratified/" + scaffold.name + "/"
        if not os.path.exists(plot_dir):
            os.makedirs(plot_dir, 0755)
        plot_element_frequencies(scaffold, plot_dir=plot_dir)
        # loop over elements in CIGAR (e.g. M, H, S, ...)
        for element in scaffold.lengthFreqDict.keys():
            # can't do it unless one value is > 0
            if len(scaffold.lengthFreqDict[element]) > 0:
                plot_element_length_distribution(scaffold, plot_dir=plot_dir, element=element, fraction=True)


